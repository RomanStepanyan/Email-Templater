[{"D:\\Projects\\Пробное задание\\Email-Templater\\src\\index.js":"1","D:\\Projects\\Пробное задание\\Email-Templater\\src\\App.js":"2","D:\\Projects\\Пробное задание\\Email-Templater\\src\\reportWebVitals.js":"3","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\Header\\Header.js":"4","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\FirstPage\\firstPage.js":"5","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\Preview\\Preview.js":"6","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\Values\\Values.js":"7","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\axiosFormPost.js":"8"},{"size":563,"mtime":1639053134258,"results":"9","hashOfConfig":"10"},{"size":2471,"mtime":1639006478825,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1639013787156,"results":"12","hashOfConfig":"10"},{"size":343,"mtime":1639011238501,"results":"13","hashOfConfig":"10"},{"size":2919,"mtime":1639075467321,"results":"14","hashOfConfig":"10"},{"size":2755,"mtime":1639011238546,"results":"15","hashOfConfig":"10"},{"size":1970,"mtime":1639011238584,"results":"16","hashOfConfig":"10"},{"size":1084,"mtime":1639003846647,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"webawv",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"D:\\Projects\\Пробное задание\\Email-Templater\\src\\index.js",[],"D:\\Projects\\Пробное задание\\Email-Templater\\src\\App.js",[],"D:\\Projects\\Пробное задание\\Email-Templater\\src\\reportWebVitals.js",[],"D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\Header\\Header.js",[],"D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\FirstPage\\firstPage.js",["38"],"import { useNavigate } from 'react-router-dom';\n\nimport s from './FirstPage.module.css';\n\nconst FirsPage = props => {\n  let navigate = useNavigate();\n\n  const handleChange = ({ target }) => {\n    props.setBodyInput(target.value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const bodyVariables = [];\n    const bodyText = [];\n\n    const newSplit = props.bodyInput.match(/[^\\s,.:;!?\\n]+|[.,:;!?\\n]/g);\n\n    if (newSplit && props.bodyArray) {\n      newSplit.map(item => {\n        const splittedItem = item.split(' ', 1);\n        bodyText.push(...splittedItem);\n\n        const notNewVariables = !!props.bodyArray.find(\n          variable => variable.toString() === splittedItem.toString(),\n        );\n        const inBodyVariables = !!bodyVariables.find(\n          variable => variable.toString() === splittedItem.toString(),\n        );\n\n        if (\n          /^[{][a-zA-Z0-9]*[}]$/.test(splittedItem) &&\n          !notNewVariables &&\n          !inBodyVariables\n        ) {\n          bodyVariables.push(...splittedItem);\n        }\n      });\n\n      props.setBodyArray([...props.bodyArray, ...bodyVariables]);\n      props.setSplittedBodyInput([...bodyText]);\n\n      navigate('/values');\n    }\n  };\n\n  return (\n    <div className={s.container}>\n      <div className={s.listWrapper}>\n        <ol className={s.list}>\n          <li className={s.listItem}>Compose Email Template</li>\n          <li className={s.listItem}> Set Values</li>\n          <li className={s.listItem}> Preview and Send</li>\n        </ol>\n      </div>\n      <div className={s.titleWrapper}>\n        <h2 className={s.title}>Compose Email Template</h2>\n      </div>\n      <form className={s.form} onSubmit={handleFormSubmit}>\n        {props.initialState.map(item => (\n          <label key={item} className={s.formLabelWrapper}>\n            <h5 className={s.formLabel}>{item.slice(1, -1)}</h5>\n            <input\n              type=\"text\"\n              name={item}\n              className={s.formInput}\n              placeholder={item}\n              value={item}\n              onChange={handleChange}\n            />\n          </label>\n        ))}\n\n        <label className={s.formLabelWrapper}>\n          <h5 className={s.formLabel}>Body</h5>\n          <textarea\n            name=\"body\"\n            cols=\"40\"\n            rows=\"5\"\n            className={s.formInputBody}\n            required\n            placeholder=\"Please add the message\"\n            value={props.bodyInput.toString()}\n            onChange={handleChange}\n            // pattern=\"/^[{][a-zA-Z]*[}]/\"\n            title=\"The variable can only consist of letters without apostrophes, dashes, spaces etc. For example {name} but not {name,}\"\n          />\n        </label>\n        <button type=\"submit\" className={s.setButton}>\n          <h5 className={s.setButtonTitle}>SET VARIABLES</h5>\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default FirsPage;\n","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\Preview\\Preview.js",["39"],"import { useNavigate } from 'react-router-dom';\n\nimport { ToastContainer } from 'react-toastify';\n\nimport postFormData from '../axiosFormPost';\n\nimport s from './Preview.module.css';\n\nconst Preview = props => {\n  const bodyInput = props.bodyInput;\n  const inputValues = props.inputValues;\n  const splittedBodyInput = props.splittedBodyInput;\n\n  const navigate = useNavigate();\n\n  const newBodyText = (splittedBodyInput, inputValues) => {\n    let C;\n    if (splittedBodyInput.length > 0) {\n      C = [splittedBodyInput?.map(el => inputValues[el] || el).join(' ')];\n    }\n    return C;\n  };\n\n  const backButtonOnClick = event => {\n    event.preventDefault();\n    navigate('/values');\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    postFormData({\n      to: inputValues['{recipient}'],\n      subject: inputValues['{subject}'],\n      body: newBodyText(splittedBodyInput, inputValues).toString(),\n    });\n  };\n\n  return (\n    <div className={s.container}>\n      <div className={s.listWrapper}>\n        <ToastContainer className={s.ToastContainer} />\n        <ol className={s.list}>\n          <li className={s.listItem}>Compose Email Template</li>\n          <li className={s.listItem}> Set Values</li>\n          <li className={s.listItem}> Preview and Send</li>\n        </ol>\n      </div>\n      <div className={s.titleWrapper}>\n        <h2 className={s.title}>Preview and Send</h2>\n      </div>\n      <form className={s.form} onSubmit={handleFormSubmit}>\n        {props.initialState.map(item => (\n          <label key={item} className={s.formLabelWrapper}>\n            <h5 className={s.formLabel}>{item.slice(1, -1)}</h5>\n            <input\n              type=\"text\"\n              name={item}\n              className={s.formInput}\n              placeholder={item}\n              value={inputValues[item].toString()}\n              readOnly\n            />\n          </label>\n        ))}\n\n        <label className={s.formLabelWrapper}>\n          <h5 className={s.formLabel}>Body</h5>\n          <textarea\n            name=\"body\"\n            cols=\"40\"\n            rows=\"5\"\n            className={s.formInputBody}\n            placeholder=\"Please add the message\"\n            value={newBodyText(splittedBodyInput, inputValues).toString()}\n            readOnly\n          />\n        </label>\n        <div className={s.formButtonWrapper}>\n          <button\n            type=\"submit\"\n            className={s.backButton}\n            onClick={backButtonOnClick}\n          >\n            <h5 className={s.backButtonTitle}>BACK</h5>\n          </button>\n          <button type=\"submit\" className={s.setButton}>\n            <h5 className={s.setButtonTitle}>SEND</h5>\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default Preview;\n","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\Values\\Values.js",["40"],"import { useNavigate } from 'react-router-dom';\n\nimport s from './Values.module.css';\n\nconst Values = props => {\n  const bodyInput = props.bodyInput;\n  const inputValues = props.inputValues;\n\n  const navigate = useNavigate();\n\n  const handleChange = ({ target }) => {\n    props.setInputValues(prevState => ({\n      ...prevState,\n      [target.name]: target.value,\n    }));\n  };\n\n  const backButtonOnClick = event => {\n    event.preventDefault();\n    navigate('/');\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    props.setInputValues({ ...props.inputValues });\n    navigate('/preview');\n  };\n\n  return (\n    <div className={s.container}>\n      <div className={s.listWrapper}>\n        <ol className={s.list}>\n          <li className={s.listItem}>Compose Email Template</li>\n          <li className={s.listItem}> Set Values</li>\n          <li className={s.listItem}> Preview and Send</li>\n        </ol>\n      </div>\n      <div className={s.titleWrapper}>\n        <h2 className={s.title}>Set Values</h2>\n      </div>\n      <form className={s.form} onSubmit={handleFormSubmit}>\n        {props.bodyArray.map(item => (\n          <label key={item} className={s.formLabelWrapper}>\n            <h5 className={s.formLabel}>{item}</h5>\n            <input\n              type=\"text\"\n              name={item}\n              className={s.formInput}\n              required\n              value={inputValues[item]}\n              onChange={handleChange}\n            />\n          </label>\n        ))}\n        <div className={s.formButtonWrapper}>\n          <button\n            type=\"submit\"\n            className={s.backButton}\n            onClick={backButtonOnClick}\n          >\n            <h5 className={s.backButtonTitle}>BACK</h5>\n          </button>\n          <button type=\"submit\" className={s.setButton}>\n            <h5 className={s.setButtonTitle}>PREVIEW</h5>\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default Values;\n","D:\\Projects\\Пробное задание\\Email-Templater\\src\\components\\axiosFormPost.js",["41"],"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport s from './axiosFormPost.css';\n\nconst baseUrl = 'https://mock.at.leanylabs.com/email';\n\nconst postFormData = payload => {\n  axios\n    .post(baseUrl, payload)\n\n    .then(res => {\n      console.log(res.message);\n      if (res.status === 201) {\n        toast('Email sent successfully!', {\n          className: 'success-toast',\n          draggable: true,\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n        });\n      }\n    })\n    .catch(error => {\n      console.log(error.message);\n      if (error.message) {\n        toast('Failed to send email!', {\n          className: 'failed-toast',\n          draggable: true,\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n        });\n      }\n    });\n};\nexport default postFormData;\n",{"ruleId":"42","severity":1,"message":"43","line":20,"column":25,"nodeType":"44","messageId":"45","endLine":20,"endColumn":27},{"ruleId":"46","severity":1,"message":"47","line":10,"column":9,"nodeType":"48","messageId":"49","endLine":10,"endColumn":18},{"ruleId":"46","severity":1,"message":"47","line":6,"column":9,"nodeType":"48","messageId":"49","endLine":6,"endColumn":18},{"ruleId":"46","severity":1,"message":"50","line":5,"column":8,"nodeType":"48","messageId":"49","endLine":5,"endColumn":9},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'bodyInput' is assigned a value but never used.","Identifier","unusedVar","'s' is defined but never used."]